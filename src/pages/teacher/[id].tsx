import type { GetStaticProps, NextPage } from 'next';
import Head from 'next/head';
import styles from '../../styles/Home.module.css';
import { Avatar, Box, Flex, Heading, HStack, StackDivider, Text } from '@chakra-ui/react';
import Header from '../../components/Header';
import { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react';
import { DoubleCircle, SingleOutlineCircle, OutlineTriangle, Close } from '../../Icon/Icon';
import { Table, Thead, Tbody, Tr, Th, Td, TableContainer } from '@chakra-ui/react';
import SubjectTable from '../../components/SubjectTable';
import ScheduleTable from '../../components/ScheduleTable';
import { client } from '../../libs/client';
import { Teacher } from '../../types/api';
import { useState } from 'react';
import VisibilitySection from '../../components/VisibilitySection';

interface Props {
  teacher: Teacher;
}

const Home: NextPage<Props> = ({ teacher }) => {
  console.log(teacher);
  const [currentImage, setCurrentImage] = useState<string>(teacher.photo[0].photo.url);
  const imageClickHandler = (image: string) => {
    setCurrentImage(image);
  };
  return (
    <VisibilitySection chakraProps={{ mb: 10 }}>
      <Box className={styles.container}>
        <Head>
          <title>KnockLeran | {teacher.name}</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Header darkMode={true} />
        <Box as="main" mt={'-72px'}>
          <Flex
            direction={['column', 'row']}
            alignItems={['column', 'flex-end']}
            maxWidth="820px"
            marginX={'auto'}
            mb={'48px'}
          >
            <Box maxWidth={'100%'} mr={['auto', '24px']} ml={['auto', '0']} mb={['16px', 0]}>
              <Avatar
                width={['142px', '145x']}
                height={['142px', '145px']}
                src={currentImage}
                mb={'8px'}
                border={'3px solid white'}
              />
              <HStack justifyContent={'space-between'} width="100%" px={['0', '8px']}>
                <Avatar
                  width={['44px', '34px']}
                  height={['44px', '34px']}
                  src={teacher.photo[0].photo.url}
                  cursor="pointer"
                  onClick={() => imageClickHandler(teacher.photo[0].photo.url)}
                  borderWidth={currentImage === teacher.photo[0].photo.url ? '2px' : '0'}
                  borderColor={'primary'}
                  opacity={currentImage === teacher.photo[0].photo.url ? '100%' : '50%'}
                />
                <Avatar
                  width={['44px', '34px']}
                  height={['44px', '34px']}
                  src={teacher.photo[1].photo.url}
                  cursor="pointer"
                  onClick={() => imageClickHandler(teacher.photo[1].photo.url)}
                  borderWidth={currentImage === teacher.photo[1].photo.url ? '2px' : '0'}
                  borderColor={'primary'}
                  opacity={currentImage === teacher.photo[1].photo.url ? '100%' : '50%'}
                />
                <Avatar
                  width={['44px', '34px']}
                  height={['44px', '34px']}
                  src={teacher.photo[2].photo.url}
                  cursor="pointer"
                  onClick={() => imageClickHandler(teacher.photo[2].photo.url)}
                  borderWidth={currentImage === teacher.photo[2].photo.url ? '2px' : '0'}
                  borderColor={'primary'}
                  opacity={currentImage === teacher.photo[2].photo.url ? '100%' : '50%'}
                />
              </HStack>
            </Box>
            <Box>
              <Flex
                direction={['column', 'row']}
                justifyContent={['center', 'flex-start']}
                alignItems={'center'}
                mb={['4px', '12px']}
              >
                <Heading size={'title1'} mr="12px">
                  {teacher.name}
                </Heading>
                <Text textStyle={'body1Light'}>{teacher.name_furigana}</Text>
              </Flex>
              <HStack
                textStyle={'body1Light'}
                spacing={'8px'}
                wrap="wrap"
                divider={<StackDivider transform="translateY(5px)" height={'18px'} borderColor={'border'} />}
                mb={['16px', '8px']}
                justify={['center', 'flex-start']}
                color={'secondaryText'}
              >
                <Text>{teacher.age}歳</Text>
                <Text>{teacher.gender}</Text>
                <Text>{teacher.company_name}</Text>
                <Text>{teacher.job_category}</Text>
              </HStack>
            </Box>
          </Flex>
          <Tabs colorScheme="brand">
            <TabList borderColor={'border'} borderBottom="1px solid" color="secondaryText">
              <Flex width={'100%'} maxWidth="820px" margin="0 auto">
                <Tab fontWeight={'bold'} width={['50%', '160px']}>
                  プロフィール
                </Tab>
                <Tab fontWeight={'bold'} width={['50%', '160px']}>
                  授業内容
                </Tab>
              </Flex>
            </TabList>

            <TabPanels>
              <TabPanel width={'100%'} maxWidth="820px" margin="0 auto">
                <Box my="56px">
                  <Heading size={'title2'} mb="24px">
                    自己紹介
                  </Heading>
                  <Text textStyle={'body1Light'}>{teacher.self_pr}</Text>
                </Box>
                <Box mb="56px">
                  <Heading size={'title2'} mb="24px">
                    話せるテーマ
                  </Heading>
                  <Text textStyle={'body1Light'}>{teacher.talk_theme}</Text>
                </Box>
              </TabPanel>
              <TabPanel width={'100%'} maxWidth="820px" margin="0 auto">
                <Box my="56px">
                  <Heading size={'title2'} mb="24px">
                    授業の紹介文
                  </Heading>
                  <Text textStyle={'body1Light'}>{teacher.class_desc}</Text>
                </Box>
                <Box my="56px">
                  <Heading size={'title2'} mb="24px">
                    学問分野
                  </Heading>
                  <Text textStyle={'body1Light'}>{teacher.course[0]}</Text>
                </Box>
                <Box my="56px">
                  <Heading size={'title2'} mb="24px">
                    教える学年と教科
                  </Heading>
                  <Flex bg="primaryLight" color={'primary'} p={'6px 16px'} wrap="wrap" mb={'12px'}>
                    <Flex align={'center'} mr="20px">
                      <DoubleCircle color={'primary'} boxSize={'14px'} mr={'4px'} />
                      <Text textStyle={'caption1'}>受験対策可能</Text>
                    </Flex>
                    <Flex align={'center'} mr="20px">
                      <SingleOutlineCircle color={'primary'} boxSize={'14px'} mr={'4px'} />
                      <Text textStyle={'caption1'}>受験対策可能</Text>
                    </Flex>
                    <Flex align={'center'} mr="20px">
                      <OutlineTriangle color={'secondary'} mr={'4px'} />
                      <Text textStyle={'caption1'}>受験対策可能</Text>
                    </Flex>
                    <Flex align={'center'}>
                      <Close color={'border'} mr={'4px'} />
                      <Text textStyle={'caption1'}>対応不可</Text>
                    </Flex>
                  </Flex>
                  <SubjectTable teach_subject={teacher.teach_subject} />
                </Box>
                <Box my="56px">
                  <Heading size={'title2'} mb="24px">
                    授業可能日・時間
                  </Heading>
                  <ScheduleTable contents={teacher.work_date} />
                </Box>
                <Box my="56px">
                  <Heading size={'title2'} mb="24px">
                    特別対応
                  </Heading>
                  <TableContainer>
                    <Table
                      variant={'simple'}
                      overflowX={'scroll'}
                      sx={{ borderCollapse: 'collapse', border: '1px solid rgb(219,219,219)' }}
                    >
                      <Thead bg="primary">
                        <Tr>
                          <Th
                            textAlign="center"
                            color="white"
                            rowSpan={2}
                            borderColor="rgba(219,219,219,0.2)"
                            borderBottomWidth={0}
                            borderRightWidth={'1px'}
                          >
                            対応内容
                          </Th>
                          <Th textAlign="center" color="white" colSpan={5} borderColor="rgba(219,219,219,0.2)">
                            対応について
                          </Th>
                        </Tr>
                      </Thead>
                      <Tbody>
                        <Tr>
                          <Td textAlign="center" borderColor="border" borderRightWidth={'1px'}>
                            不登校対応
                          </Td>
                          <Td textAlign="center" borderColor="border" borderRightWidth={'1px'}>
                            対応可能（指導経験あり）
                          </Td>
                        </Tr>
                        <Tr>
                          <Td textAlign="center" borderColor="border" borderRightWidth={'1px'}>
                            振替授業
                          </Td>
                          <Td textAlign="center" borderColor="border" borderRightWidth={'1px'}>
                            先生都合のみ対応
                          </Td>
                        </Tr>
                        <Tr>
                          <Td textAlign="center" borderColor="border" borderRightWidth={'1px'}>
                            宿題の有無
                          </Td>
                          <Td textAlign="center" borderColor="border" borderRightWidth={'1px'}>
                            生徒の自主性に任せる
                          </Td>
                        </Tr>
                      </Tbody>
                    </Table>
                  </TableContainer>
                </Box>
              </TabPanel>
            </TabPanels>
          </Tabs>
        </Box>
      </Box>
    </VisibilitySection>
  );
};

export default Home;

export const getStaticPaths = async () => {
  const data = await client.get({ endpoint: 'teacher' });

  const paths = data.contents.map((content: Teacher) => `/teacher/${content.id}`);
  return { paths, fallback: false };
};

export const getStaticProps: GetStaticProps = async (context) => {
  const id = context.params?.id;
  const idExceptArray = id instanceof Array ? id[0] : id;
  const data = await client.get({ endpoint: 'teacher', contentId: idExceptArray });
  return {
    props: {
      teacher: data,
    },
  };
};
